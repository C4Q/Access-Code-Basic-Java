/*

Example 27: Polymorphism

Below is a modification of the code for the classes Student, Undergrad, and Grad from exercise 26.  
An error will exist when the main function is run because the Student class is missing the method
named computerCourseGrade()

Insert the following function into student after seeing the error:

public String computeCourseGrade(){
	return " ";
}

And see if the error still exists.  Understand why this error existed and why it is fixed, if it was.
*/


// STUDENT CLASS, CONTAINS MAIN


public class Student
{
	private String name;
	private String id;
	private double GPA;

	public Student( String n, String id)	//constructor
	{
		name = n;
		this.id = id;
		GPA = 0.0;
	}

	public void setName(String n)
	{
		name =n;	
	}

	public void setId(String id)
	{
		this.id = id;	
	}

	public void setGPA(double g)
	{
		GPA = g;
	}
	
	public String getName()
	{
		return name;
	}

	public String getId()
	{
		return id;
	}
	
	public double getGPA()
	{
		return GPA;
	}

	public boolean isPassing()
	{
		if (this.getGPA() > 2) 
			return true;
		else 
			return false;
	}
	
	
	public String toString()
	{
		return "The name of the student is " + name + ".  The ID of the student is " + id + ".  The GPA is " + GPA + ".";
	}
	
	public static void main(String[] args)
	{
		Student[] students = new Student[5];
		
		students[0] = new Undergrad("Tyler", "1", "Computer Science", "None");
		students[1] = new Grad("James", "2", "Mathematics", "Education");
		students[2] = new Undergrad("Kathy", "3", "Biology", " None");
		students[3] = new Grad("Mike", "4", "Computer Science", "Physics");
		students[4] = new Undergrad("Michelle", "5", "English", "Fine Arts");
		
		students[0].setGPA(3.2);
		students[1].setGPA(4.0);
		students[2].setGPA(2.3);
		students[3].setGPA(2.8);
		students[4].setGPA(1.2);
		
		for (Student s: students)
		{
			System.out.println(s);
			System.out.println();
		}
		
		for (Student s: students)
		{
			if (s.isPassing() ) System.out.println(s.getName() + "is passing.");
			else System.out.println(s.getName() + "is not passing.");
		}
		
		System.out.println();
		
		
		for (int i = 0; i < students.length; i++)
			System.out.println (students[i].getName() + " has the letter grade of: " +  students[i].computeCourseGrade() );
				
	}
		
}



//THE UNDERGRAD CLASS


public class Undergrad extends Student
{
	private String major;
	private String minor;
	
	public Undergrad( String n, String id)
	{
		super(n,id);
	}
	
	public Undergrad( String n, String id, String ma, String mi ) {
		super(n, id); 		//parent class constructor
		major = ma;
		minor = mi;
	}
	
	public void setMajor(String m)
	{
		major = m;	
	}

	public void setMinor(String m)
	{
		minor = m;	
	}

	public String getMajor()
	{
		return major;
	}

	public String getMinor()
	{
		return minor;
	}
	
	public String computeCourseGrade(){
		if (this.getGPA() >= 4.0) return "A";
		else if (this.getGPA() >= 3.67) return "A-";
		else if (this.getGPA() >= 3.33) return "B+";
		else if (this.getGPA() >= 3.0) return "B";
		else if (this.getGPA() >= 2.67) return "B-";
		else if (this.getGPA() >= 2.33) return "C+";
		else if (this.getGPA() >= 2.0) return "C";
		else if (this.getGPA() >= 1.67) return "C-";
		else if (this.getGPA() >= 1.33) return "D+";
		else if (this.getGPA() >= 1.0) return "D";
		else return "F";
	}
	
	public String toString()
	{
		return "The name of the student is " + this.getName() + ".  The ID of the student is " + this.getId() + ".  The GPA is " + this.getGPA() + "\nThestudent's major is " + major + ".  The student's minor is " + minor + "."; 
	}
			
}




//THE GRAD CLASS



public class Grad extends Student {
	private String thesisTopic;
	private String thesisAdvisor;
	
	public Grad( String n, String id)
	{
		super(n,id);
	}
	
	public Grad ( String n, String id, String tt, String ta ) {
		super(n, id); 		//parent class constructor
		thesisTopic = tt;
		thesisAdvisor = ta;
	}
	
	public void setMajor(String tt)
	{
		thesisTopic = tt;	
	}

	public void setMinor(String ta)
	{
		thesisAdvisor = ta;	
	}

	public String getThesisTopic()
	{
		return thesisTopic;
	}

	public String getThesisAdvisor()
	{
		return thesisAdvisor;
	}

	public boolean isPassing()
	{
		if (this.getGPA() > 3) return true;
		else return false;
	}
	
	public String computeCourseGrade(){
		if (this.getGPA() >= 4.0) return "A";
		else if (this.getGPA() >= 3.8) return "B+";
		else if (this.getGPA() >= 3.6) return "B";
		else if (this.getGPA() >= 3.4) return "B-";
		else if (this.getGPA() >= 3.2) return "C+";
		else if (this.getGPA() >= 3.0) return "C";
		else if (this.getGPA() >= 2.8) return "C-";
		else if (this.getGPA() >= 2.6) return "D+";
		else if (this.getGPA() >= 2.4) return "D";
		else return "F";
	}
	
	
	public String toString()
	{
		return "The name of the student is " + this.getName() + ".  The ID of the student is " + this.getId() + ".  The GPA is " + this.getGPA() + "\nThe student's thesis topic is " + thesisTopic + ".  The student's thesis advisor is " + thesisAdvisor + "."; 
	}
			
}


